// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "video.hxx"

// video
// 

const video::frame_sequence& video::
frame () const
{
  return this->frame_;
}

video::frame_sequence& video::
frame ()
{
  return this->frame_;
}

void video::
frame (const frame_sequence& s)
{
  this->frame_ = s;
}

const video::name_optional& video::
name () const
{
  return this->name_;
}

video::name_optional& video::
name ()
{
  return this->name_;
}

void video::
name (const name_type& x)
{
  this->name_.set (x);
}

void video::
name (const name_optional& x)
{
  this->name_ = x;
}

void video::
name (::std::auto_ptr< name_type > x)
{
  this->name_.set (x);
}

const video::algorithm_optional& video::
algorithm () const
{
  return this->algorithm_;
}

video::algorithm_optional& video::
algorithm ()
{
  return this->algorithm_;
}

void video::
algorithm (const algorithm_type& x)
{
  this->algorithm_.set (x);
}

void video::
algorithm (const algorithm_optional& x)
{
  this->algorithm_ = x;
}

void video::
algorithm (::std::auto_ptr< algorithm_type > x)
{
  this->algorithm_.set (x);
}


// frame
// 

const frame::roi_sequence& frame::
roi () const
{
  return this->roi_;
}

frame::roi_sequence& frame::
roi ()
{
  return this->roi_;
}

void frame::
roi (const roi_sequence& s)
{
  this->roi_ = s;
}

const frame::no_optional& frame::
no () const
{
  return this->no_;
}

frame::no_optional& frame::
no ()
{
  return this->no_;
}

void frame::
no (const no_type& x)
{
  this->no_.set (x);
}

void frame::
no (const no_optional& x)
{
  this->no_ = x;
}


// roi
// 

const roi::no_optional& roi::
no () const
{
  return this->no_;
}

roi::no_optional& roi::
no ()
{
  return this->no_;
}

void roi::
no (const no_type& x)
{
  this->no_.set (x);
}

void roi::
no (const no_optional& x)
{
  this->no_ = x;
}

const roi::x_optional& roi::
x () const
{
  return this->x_;
}

roi::x_optional& roi::
x ()
{
  return this->x_;
}

void roi::
x (const x_type& x)
{
  this->x_.set (x);
}

void roi::
x (const x_optional& x)
{
  this->x_ = x;
}

const roi::y_optional& roi::
y () const
{
  return this->y_;
}

roi::y_optional& roi::
y ()
{
  return this->y_;
}

void roi::
y (const y_type& x)
{
  this->y_.set (x);
}

void roi::
y (const y_optional& x)
{
  this->y_ = x;
}

const roi::w_optional& roi::
w () const
{
  return this->w_;
}

roi::w_optional& roi::
w ()
{
  return this->w_;
}

void roi::
w (const w_type& x)
{
  this->w_.set (x);
}

void roi::
w (const w_optional& x)
{
  this->w_ = x;
}

const roi::h_optional& roi::
h () const
{
  return this->h_;
}

roi::h_optional& roi::
h ()
{
  return this->h_;
}

void roi::
h (const h_type& x)
{
  this->h_.set (x);
}

void roi::
h (const h_optional& x)
{
  this->h_ = x;
}

const roi::weight_optional& roi::
weight () const
{
  return this->weight_;
}

roi::weight_optional& roi::
weight ()
{
  return this->weight_;
}

void roi::
weight (const weight_type& x)
{
  this->weight_.set (x);
}

void roi::
weight (const weight_optional& x)
{
  this->weight_ = x;
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// video
//

video::
video ()
: ::xml_schema::type (),
  frame_ (this),
  name_ (this),
  algorithm_ (this)
{
}

video::
video (const video& x,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  frame_ (x.frame_, f, this),
  name_ (x.name_, f, this),
  algorithm_ (x.algorithm_, f, this)
{
}

video::
video (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  frame_ (this),
  name_ (this),
  algorithm_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void video::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // frame
    //
    if (n.name () == "frame" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< frame_type > r (
        frame_traits::create (i, f, this));

      this->frame_.push_back (r);
      continue;
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (name_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "algorithm" && n.namespace_ ().empty ())
    {
      this->algorithm_.set (algorithm_traits::create (i, f, this));
      continue;
    }
  }
}

video* video::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class video (*this, f, c);
}

video& video::
operator= (const video& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->frame_ = x.frame_;
    this->name_ = x.name_;
    this->algorithm_ = x.algorithm_;
  }

  return *this;
}

video::
~video ()
{
}

// frame
//

frame::
frame ()
: ::xml_schema::type (),
  roi_ (this),
  no_ (this)
{
}

frame::
frame (const frame& x,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  roi_ (x.roi_, f, this),
  no_ (x.no_, f, this)
{
}

frame::
frame (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  roi_ (this),
  no_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void frame::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // roi
    //
    if (n.name () == "roi" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< roi_type > r (
        roi_traits::create (i, f, this));

      this->roi_.push_back (r);
      continue;
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "no" && n.namespace_ ().empty ())
    {
      this->no_.set (no_traits::create (i, f, this));
      continue;
    }
  }
}

frame* frame::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class frame (*this, f, c);
}

frame& frame::
operator= (const frame& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->roi_ = x.roi_;
    this->no_ = x.no_;
  }

  return *this;
}

frame::
~frame ()
{
}

// roi
//

roi::
roi ()
: ::xml_schema::string (),
  no_ (this),
  x_ (this),
  y_ (this),
  w_ (this),
  h_ (this),
  weight_ (this)
{
}

roi::
roi (const char* _xsd_string_base)
: ::xml_schema::string (_xsd_string_base),
  no_ (this),
  x_ (this),
  y_ (this),
  w_ (this),
  h_ (this),
  weight_ (this)
{
}

roi::
roi (const ::std::string& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base),
  no_ (this),
  x_ (this),
  y_ (this),
  w_ (this),
  h_ (this),
  weight_ (this)
{
}

roi::
roi (const ::xml_schema::string& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base),
  no_ (this),
  x_ (this),
  y_ (this),
  w_ (this),
  h_ (this),
  weight_ (this)
{
}

roi::
roi (const roi& x,
     ::xml_schema::flags f,
     ::xml_schema::container* c)
: ::xml_schema::string (x, f, c),
  no_ (x.no_, f, this),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  w_ (x.w_, f, this),
  h_ (x.h_, f, this),
  weight_ (x.weight_, f, this)
{
}

roi::
roi (const ::xercesc::DOMElement& e,
     ::xml_schema::flags f,
     ::xml_schema::container* c)
: ::xml_schema::string (e, f | ::xml_schema::flags::base, c),
  no_ (this),
  x_ (this),
  y_ (this),
  w_ (this),
  h_ (this),
  weight_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void roi::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "no" && n.namespace_ ().empty ())
    {
      this->no_.set (no_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      this->x_.set (x_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      this->y_.set (y_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "w" && n.namespace_ ().empty ())
    {
      this->w_.set (w_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "h" && n.namespace_ ().empty ())
    {
      this->h_.set (h_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "weight" && n.namespace_ ().empty ())
    {
      this->weight_.set (weight_traits::create (i, f, this));
      continue;
    }
  }
}

roi* roi::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class roi (*this, f, c);
}

roi& roi::
operator= (const roi& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::string& > (*this) = x;
    this->no_ = x.no_;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->w_ = x.w_;
    this->h_ = x.h_;
    this->weight_ = x.weight_;
  }

  return *this;
}

roi::
~roi ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::video >
video_ (const ::std::string& u,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::video > (
    ::video_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::video >
video_ (const ::std::string& u,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::video > (
    ::video_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::video >
video_ (const ::std::string& u,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::video > (
    ::video_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::video >
video_ (::std::istream& is,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::video_ (isrc, f, p);
}

::std::auto_ptr< ::video >
video_ (::std::istream& is,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::video_ (isrc, h, f, p);
}

::std::auto_ptr< ::video >
video_ (::std::istream& is,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::video_ (isrc, h, f, p);
}

::std::auto_ptr< ::video >
video_ (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::video_ (isrc, f, p);
}

::std::auto_ptr< ::video >
video_ (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::video_ (isrc, h, f, p);
}

::std::auto_ptr< ::video >
video_ (::std::istream& is,
        const ::std::string& sid,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::video_ (isrc, h, f, p);
}

::std::auto_ptr< ::video >
video_ (::xercesc::InputSource& i,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::video > (
    ::video_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::video >
video_ (::xercesc::InputSource& i,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::video > (
    ::video_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::video >
video_ (::xercesc::InputSource& i,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::video > (
    ::video_ (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::video >
video_ (const ::xercesc::DOMDocument& doc,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::auto_ptr< ::video > (
      ::video_ (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "video" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::video > r (
      ::xsd::cxx::tree::traits< ::video, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "video",
    "");
}

::std::auto_ptr< ::video >
video_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
        ::xml_schema::flags f,
        const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "video" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::video > r (
      ::xsd::cxx::tree::traits< ::video, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "video",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

